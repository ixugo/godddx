// Code generated by gowebx, DO AVOID EDIT.
package {{.PackageName}}db

import (
	"context"

	"gorm.io/gorm"
	"github.com/ixugo/goddd/pkg/orm"
)

var _ {{.PackageName}}.{{.Name}}Storer = {{.Name}}{}

// {{.Name}} Related business namespaces
type {{.Name}} struct{
	db *gorm.DB
}

// New{{.Name}} instance object
func New{{.Name}}(db *gorm.DB) {{.Name}} {
	return {{.Name}}{db:db}
}

// Find{{.Name}} implements {{.PackageName}}.{{.Name}}Storer.
func (d {{.Name}})Find{{.Name}}(ctx context.Context, bs *[]*{{.PackageName}}.{{.Name}},page orm.Pager,args...orm.QueryOption) (int64,error){
	return orm.FindWithContext(ctx,d.db, bs, page, args...)
}

// Get{{.Name}} implements {{.PackageName}}.{{.Name}}Storer.
func (d {{.Name}})Get{{.Name}}(ctx context.Context,b *{{.PackageName}}.{{.Name}},args...orm.QueryOption) error {
	return orm.FirstWithContext(ctx,d.db,b,args...)
}

// Add{{.Name}} implements {{.PackageName}}.{{.Name}}Storer.
func (d {{.Name}})Add{{.Name}}(ctx context.Context,b *{{.PackageName}}.{{.Name}}) error {
	return d.db.WithContext(ctx).Create(b).Error
}

// Edit{{.Name}} implements {{.PackageName}}.{{.Name}}Storer.
func (d {{.Name}})Edit{{.Name}}(ctx context.Context,b *{{.PackageName}}.{{.Name}},fn func(*{{.PackageName}}.{{.Name}}),args...orm.QueryOption) error {
	return orm.UpdateWithContext(ctx,d.db, b, fn, args...)
}

// Del{{.Name}} implements {{.PackageName}}.{{.Name}}Storer.
func (d {{.Name}})Del{{.Name}}(ctx context.Context,b *{{.PackageName}}.{{.Name}},args...orm.QueryOption) error {
	return orm.DeleteWithContext(ctx,d.db, b, args...)
}
