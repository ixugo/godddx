// Code generated by gowebx, DO AVOID EDIT.
package {{.PackageName}}db

import (
	"context"

	"gorm.io/gorm"
	"github.com/ixugo/goweb/pkg/orm"
)

var _ {{.PackageName}}.{{.Name}}Storer = {{.Name}}{}

// {{.Name}} Related business namespaces
type {{.Name}} DB

// New{{.Name}} instance object
func New{{.Name}}(db *gorm.DB) {{.Name}} {
	return {{.Name}}{db:db}
}

// Find implements {{.PackageName}}.{{.Name}}Storer.
func (d {{.Name}})Find(ctx context.Context, bs *[]*{{.PackageName}}.{{.Name}},page orm.Pager,args...orm.QueryOption) (int64,error){
	return orm.FindWithContext(ctx,d.db, bs, page, args...)
}

// Get implements {{.PackageName}}.{{.Name}}Storer.
func (d {{.Name}})Get(ctx context.Context,b *{{.PackageName}}.{{.Name}},args...orm.QueryOption) error {
	return orm.FirstWithContext(ctx,d.db,b,args...)
}

// Add implements {{.PackageName}}.{{.Name}}Storer.
func (d {{.Name}})Add(ctx context.Context,b *{{.PackageName}}.{{.Name}}) error {
	return d.db.WithContext(ctx).Create(b).Error
}

// Edit implements {{.PackageName}}.{{.Name}}Storer.
func (d {{.Name}})Edit(ctx context.Context,b *{{.PackageName}}.{{.Name}},fn func(*{{.PackageName}}.{{.Name}}),args...orm.QueryOption) error {
	return orm.UpdateWithContext(ctx,d.db, b, fn, args...)
}

// Del implements {{.PackageName}}.{{.Name}}Storer.
func (d {{.Name}})Del(ctx context.Context,b *{{.PackageName}}.{{.Name}},args...orm.QueryOption) error {
	return orm.DeleteWithContext(ctx,d.db, b, args...)
}

func (d {{.Name}})Session(ctx context.Context,fn ...func(*gorm.DB) error) error {
	return d.db.WithContext(ctx).Transaction(func(tx *gorm.DB) error {
		for _, f := range fn {
			if err := f(tx); err != nil {
				return err
			}
		}
		return nil
	})
}

func (d {{.Name}}) EditWithSession(tx *gorm.DB, b *{{.PackageName}}.{{.Name}}, fn func(b *{{.PackageName}}.{{.Name}}) error, opts ...orm.QueryOption) error {
	return orm.UpdateWithSession(tx, b, fn,opts... )
}
